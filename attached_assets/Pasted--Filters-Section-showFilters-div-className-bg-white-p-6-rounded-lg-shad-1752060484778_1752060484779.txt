{/* Filters Section */}
      {showFilters && (
        <div className="bg-white p-6 rounded-lg shadow-md mb-8 border border-gray-100">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-800">Filters</h2>
            <Button variant="ghost" size="sm" onClick={resetFilters} className="text-gray-500">
              Reset All
            </Button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Locations</label>
              <div className="relative">
                <Popover>
                  <PopoverTrigger asChild>
                    <Button 
                      variant="outline" 
                      className="w-full justify-between font-normal"
                    >
                      {selectedLocations.includes('any') 
                        ? "Any location" 
                        : selectedLocations.length === 1 
                          ? selectedLocations[0].charAt(0).toUpperCase() + selectedLocations[0].slice(1)
                          : ⁠ ${selectedLocations.length} locations selected ⁠
                      }
                      <ChevronDown className="ml-2 h-4 w-4 opacity-50" />
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-full p-0" align="start">
                    <Command>
                      <CommandInput placeholder="Search locations..." 
                        value={locationSearchTerm}
                        onValueChange={setLocationSearchTerm}
                        className="h-9"
                      />
                      <CommandList>
                        <CommandEmpty>No locations found.</CommandEmpty>
                        <CommandGroup className="max-h-[200px] overflow-y-auto">
                          <CommandItem
                            key="any-location"
                            onSelect={() => {
                              setSelectedLocations(['any']);
                              setRadiusKm('exact');
                            }}
                            className="flex items-center cursor-pointer"
                          >
                            <div className="flex items-center mr-2">
                              <Checkbox
                                checked={selectedLocations.includes('any')}
                                id="any-location"
                                className="mr-2"
                              />
                            </div>
                            Any location
                          </CommandItem>
                          
                          {filteredLocations.map((loc: string) => (
                            <CommandItem
                              key={loc}
                              onSelect={() => {
                                if (selectedLocations.includes('any')) {
                                  // If 'any' was selected, we're switching to specific locations
                                  setSelectedLocations([loc.toLowerCase()]);
                                } else if (selectedLocations.includes(loc.toLowerCase())) {
                                  // Remove this location if it's already selected
                                  const newLocations = selectedLocations.filter(l => l !== loc.toLowerCase());
                                  // If no locations left, revert to 'any'
                                  setSelectedLocations(newLocations.length ? newLocations : ['any']);
                                } else {
                                  // Add this location to the selection
                                  setSelectedLocations([...selectedLocations, loc.toLowerCase()]);
                                }
                              }}
                              className="flex items-center cursor-pointer"
                            >
                              <div className="flex items-center mr-2">
                                <Checkbox
                                  checked={selectedLocations.includes(loc.toLowerCase())}
                                  id={⁠ location-${loc} ⁠}
                                  className="mr-2"
                                />
                              </div>
                              {loc}
                            </CommandItem>
                          ))}
                        </CommandGroup>
                      </CommandList>
                    </Command>
                  </PopoverContent>
                </Popover>
                
                {selectedLocations.length > 0 && !selectedLocations.includes('any') && (
                  <div className="mt-2 flex flex-wrap gap-1">
                    {selectedLocations.map((loc: string) => (
                      <Badge 
                        key={loc} 
                        variant="outline" 
                        className="bg-blue-50 text-xs py-1"
                      >
                        {loc.charAt(0).toUpperCase() + loc.slice(1)}
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            const newLocations = selectedLocations.filter(l => l !== loc);
                            setSelectedLocations(newLocations.length ? newLocations : ['any']);
                          }}
                          className="h-4 w-4 p-0 ml-1 text-gray-400 hover:text-gray-900"
                        >
                          <X size={12} />
                        </Button>
                      </Badge>
                    ))}
                  </div>
                )}
              </div>
              
              {/* Show radius filter only when specific locations are selected (not 'any') */}
              {!selectedLocations.includes('any') && (
                <div className="mt-3">
                  <label className="block text-xs font-medium text-gray-600 mb-1">Also include projects around</label>
                  <Select value={radiusKm} onValueChange={setRadiusKm}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select radius" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="exact">Exact location only</SelectItem>
                      <SelectItem value="2">2 km radius</SelectItem>
                      <SelectItem value="3">3 km radius</SelectItem>
                      <SelectItem value="4">4 km radius</SelectItem>
                      <SelectItem value="5">5 km radius</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Property Type</label>
              <Select value={propertyType} onValueChange={setPropertyType}>
                <SelectTrigger>
                  <SelectValue placeholder="Any type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="any">Any type</SelectItem>
                  {propertyTypes.map(type => (
                    <SelectItem key={type} value={type}>{type}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Configuration</label>
              <Select value={configurations} onValueChange={setConfigurations}>
                <SelectTrigger>
                  <SelectValue placeholder="Any configuration" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="any">Any</SelectItem>
                  <SelectItem value="1BHK">1BHK</SelectItem>
                  <SelectItem value="2BHK">2BHK</SelectItem>
                  <SelectItem value="3BHK">3BHK</SelectItem>
                  <SelectItem value="4BHK">4BHK</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Construction Status</label>
              <Select value={constructionStatus} onValueChange={setConstructionStatus}>
                <SelectTrigger>
                  <SelectValue placeholder="Any status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="any">Any</SelectItem>
                  <SelectItem value="constructed">Constructed</SelectItem>
                  <SelectItem value="constructing">Constructing</SelectItem>
                  <SelectItem value="to-be-constructed">To be Constructed</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Also include projects around</label>
              <Select value={radiusKm} onValueChange={setRadiusKm}>
                <SelectTrigger>
                  <SelectValue placeholder="Select radius" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="exact">Exact location only</SelectItem>
                  <SelectItem value="2">2 km radius</SelectItem>
                  <SelectItem value="3">3 km radius</SelectItem>
                  <SelectItem value="4">4 km radius</SelectItem>
                  <SelectItem value="5">5 km radius</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="lg:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Price Per Sq.ft: ₹{pricePerSqftRange[0]} - ₹{pricePerSqftRange[1]}
              </label>
              <Slider
                defaultValue={[minPricePerSqft, maxPricePerSqft]}
                min={minPricePerSqft}
                max={maxPricePerSqft}
                step={Math.max(100, Math.floor((maxPricePerSqft - minPricePerSqft) / 40))} // Appropriate step size
                value={pricePerSqftRange}
                onValueChange={(value) => setPricePerSqftRange(value as [number, number])}
                className="mt-6"
              />
            </div>
          </div>
          
          <div className="flex justify-end mt-6">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => setShowFilters(false)}
              className="text-gray-500 mr-2"
            >
              Cancel
            </Button>
            <Button onClick={() => setShowFilters(false)}>
              Apply Filters
            </Button>
          </div>
        </div>
      )}